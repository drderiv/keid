namespace core::test

import (
    core::error
)

public function assertionError(message: string): Error => Error::create(string::format("assertion failed: ", message))

function fail(msg: string) {
    throw assertionError(msg)
}

public function assertTrue(cond: bool) {
    if !cond {
        test::fail("expecting true, received false")
    }
}

public function assertFalse(cond: bool) {
    if cond {
        test::fail("expecting false, received true")
    }
}

public function assertEqual(a: string, b: string) {
    if a != b {
        test::fail(string::format("'", a, "' != '", b, "'"))
    }
}

public function assertNotEqual(a: string, b: string) {
    if a == b {
        test::fail(string::format("'", a, "' == '", b, "'"))
    }
}

macro $DEFINE_INT_ASSERTION(#type, #operator, #name)
    public function assert#name(a: #type, b: #type) {
        if a #operator b {
            test::fail(string::format(a.toString(), " #operator ", b.toString()))
        }
    }
end macro

macro $DEFINE_INT_ASSERTIONS(#type)
    $DEFINE_INT_ASSERTION(#type, !=, Equal)
    $DEFINE_INT_ASSERTION(#type, ==, NotEqual)
end macro

$DEFINE_INT_ASSERTIONS(uint8)
$DEFINE_INT_ASSERTIONS(uint16)
$DEFINE_INT_ASSERTIONS(uint32)
$DEFINE_INT_ASSERTIONS(uint64)
$DEFINE_INT_ASSERTIONS(usize)
$DEFINE_INT_ASSERTIONS(int8)
$DEFINE_INT_ASSERTIONS(int16)
$DEFINE_INT_ASSERTIONS(int32)
$DEFINE_INT_ASSERTIONS(int64)
$DEFINE_INT_ASSERTIONS(isize)
